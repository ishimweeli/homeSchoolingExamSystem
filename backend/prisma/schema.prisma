generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String?                   @unique
  username                 String?                   @unique
  password                 String?
  firstName                String?
  lastName                 String?
  name                     String?
  role                     Role                      @default(STUDENT)
  emailVerified            DateTime?
  image                    String?
  parentId                 String?
  createdById              String?
  isActive                 Boolean                   @default(true)
  lastLogin                DateTime?
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  accounts                 Account[]
  tier                     UserTier?
  classesAsStudent         ClassStudent[]
  createdClasses           Class[]                   @relation("ClassCreator")
  classesAsTeacher         Class[]                   @relation("ClassTeacher")
  communityPosts           CommunityPost[]           @relation("CommunityPosts")
  createdAssignments       ExamAssignment[]          @relation("AssignmentCreator")
  assignedExams            ExamAssignment[]          @relation("StudentAssignments")
  examAttempts             ExamAttempt[]
  createdExams             Exam[]                    @relation("ExamCreator")
  grades                   Grade[]
  acceptedInvites          Invite[]                  @relation("UserAcceptedInvites")
  sentInvites              Invite[]                  @relation("UserSentInvites")
  createdLessonAssignments LessonPlanAssignment[]    @relation("LessonAssignmentCreator")
  lessonAssignments        LessonPlanAssignment[]    @relation("StudentLessonAssignments")
  createdLessonPlans       LessonPlan[]              @relation("CreatedLessonPlans")
  memberships              Membership[]
  ownedOrganizations       Organization[]            @relation("UserOrganizations")
  payments                 Payment[]
  portfolios               Portfolio[]               @relation("StudentPortfolio")
  postLikes                PostLike[]                @relation("PostLikes")
  performanceData          StudentPerformanceData[]  @relation("PerformanceData")
  standardProgress         StudentStandardProgress[] @relation("StudentStandardProgress")
  stepProgress             StudentStepProgress[]     @relation("StudentStepProgress")
  createdStudyAssignments  StudyModuleAssignment[]   @relation("StudyAssignmentCreator")
  studyAssignments         StudyModuleAssignment[]   @relation("StudentStudyAssignments")
  createdStudyModules      StudyModule[]             @relation("CreatedStudyModules")
  studyProgress            StudyProgress[]           @relation("StudentProgress")
  subscriptions            Subscription[]
  createdBy                User?                     @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers             User[]                    @relation("CreatedUsers")
  parent                   User?                     @relation("ParentChild", fields: [parentId], references: [id])
  children                 User[]                    @relation("ParentChild")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  id                   String               @id @default(cuid())
  title                String
  description          String?
  subject              String
  gradeLevel           Int
  aiGenerated          Boolean              @default(true)
  aiConfig             Json?
  duration             Int?
  totalMarks           Int                  @default(100)
  passingMarks         Int                  @default(50)
  autoPublishResults   Boolean              @default(true)
  status               ExamStatus           @default(DRAFT)
  scheduledFor         DateTime?
  creatorId            String
  instructions         String?
  allowedResources     String[]             @default([])
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  hasAdvancedStructure Boolean              @default(false)
  assignments          ExamAssignment[]
  attempts             ExamAttempt[]
  sections             ExamSection[]
  creator              User                 @relation("ExamCreator", fields: [creatorId], references: [id])
  questions            Question[]
  standards            CurriculumStandard[] @relation("ExamStandards")

  @@index([creatorId])
  @@map("exams")
}

model ExamSection {
  id           String     @id @default(cuid())
  examId       String
  code         String
  title        String
  description  String?
  instructions String?
  totalMarks   Int        @default(0)
  order        Int        @default(0)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  exam         Exam       @relation(fields: [examId], references: [id], onDelete: Cascade)
  questions    Question[]

  @@index([examId])
  @@map("exam_sections")
}

model Question {
  id             String               @id @default(cuid())
  examId         String
  type           QuestionType
  question       String
  options        Json?
  correctAnswer  Json
  imageUrl       String?
  attachments    String[]             @default([])
  marks          Int                  @default(5)
  aiGenerated    Boolean              @default(true)
  difficulty     String?
  topic          String?
  explanation    String?
  gradingRubric  Json?
  sampleAnswer   String?
  order          Int                  @default(0)
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  context        String?
  questionNumber String?
  sectionId      String?
  answers        Answer[]
  exam           Exam                 @relation(fields: [examId], references: [id], onDelete: Cascade)
  section        ExamSection?         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  standards      CurriculumStandard[] @relation("QuestionStandards")

  @@index([examId])
  @@map("questions")
}

model ExamAttempt {
  id          String    @id @default(cuid())
  examId      String
  studentId   String
  startedAt   DateTime  @default(now())
  submittedAt DateTime?
  timeSpent   Int?
  isCompleted Boolean   @default(false)
  isGraded    Boolean   @default(false)
  answers     Answer[]
  exam        Exam      @relation(fields: [examId], references: [id])
  student     User      @relation(fields: [studentId], references: [id])
  grade       Grade?

  @@index([examId, studentId])
  @@index([studentId])
  @@map("exam_attempts")
}

model Answer {
  id             String      @id @default(cuid())
  attemptId      String
  questionId     String
  answer         Json
  submittedFiles String[]    @default([])
  aiScore        Float?
  aiFeedback     String?
  aiGradedAt     DateTime?
  manualScore    Float?
  manualFeedback String?
  reviewedBy     String?
  finalScore     Float?
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  attempt        ExamAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question    @relation(fields: [questionId], references: [id])

  @@index([attemptId])
  @@map("answers")
}

model Grade {
  id              String        @id @default(cuid())
  attemptId       String        @unique
  studentId       String
  totalScore      Float
  percentage      Float
  grade           String?
  status          GradingStatus @default(PENDING)
  aiAnalysis      Json?
  overallFeedback String?
  isPublished     Boolean       @default(false)
  publishedAt     DateTime?
  publishedBy     String?
  gradedAt        DateTime      @default(now())
  attempt         ExamAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  student         User          @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@map("grades")
}

model Class {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  gradeLevel        Int?
  subject           String?
  teacherId         String
  createdById       String
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now()) @map("created_at")
  updatedAt         DateTime               @updatedAt @map("updated_at")
  students          ClassStudent[]
  createdBy         User                   @relation("ClassCreator", fields: [createdById], references: [id])
  teacher           User                   @relation("ClassTeacher", fields: [teacherId], references: [id])
  examAssignments   ExamAssignment[]
  lessonAssignments LessonPlanAssignment[]

  @@index([teacherId])
  @@index([createdById])
  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  joinedAt  DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@index([classId])
  @@index([studentId])
  @@map("class_students")
}

model ExamAssignment {
  id                  String    @id @default(cuid())
  examId              String
  studentId           String?
  classId             String?
  assignedBy          String
  dueDate             DateTime?
  startDate           DateTime?
  allowLateSubmission Boolean   @default(false)
  maxAttempts         Int       @default(1)
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  attemptsUsed        Int       @default(0)
  assignedByUser      User      @relation("AssignmentCreator", fields: [assignedBy], references: [id])
  class               Class?    @relation(fields: [classId], references: [id])
  exam                Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  student             User?     @relation("StudentAssignments", fields: [studentId], references: [id])

  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
  @@index([classId])
  @@index([assignedBy])
  @@map("exam_assignments")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("audit_logs")
}

model Portfolio {
  id          String          @id @default(cuid())
  studentId   String
  title       String
  description String?
  isPublic    Boolean         @default(false)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  items       PortfolioItem[]
  student     User            @relation("StudentPortfolio", fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@map("portfolios")
}

model PortfolioItem {
  id            String            @id @default(cuid())
  portfolioId   String
  title         String
  description   String?
  type          PortfolioItemType
  content       Json
  subject       String?
  tags          String[]          @default([])
  attachments   String[]          @default([])
  reflection    String?
  learningGoals String[]          @default([])
  skills        String[]          @default([])
  grade         String?
  feedback      String?
  assessedBy    String?
  assessedAt    DateTime?
  completedAt   DateTime?
  isPublished   Boolean           @default(false)
  order         Int               @default(0)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  portfolio     Portfolio         @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@map("portfolio_items")
}

model CommunityPost {
  id          String          @id @default(cuid())
  authorId    String
  title       String
  content     String
  type        PostType
  category    String?
  tags        String[]        @default([])
  parentId    String?
  views       Int             @default(0)
  isPublished Boolean         @default(true)
  isPinned    Boolean         @default(false)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  author      User            @relation("CommunityPosts", fields: [authorId], references: [id])
  parent      CommunityPost?  @relation("PostReplies", fields: [parentId], references: [id])
  replies     CommunityPost[] @relation("PostReplies")
  likes       PostLike[]

  @@index([authorId])
  @@index([type])
  @@index([category])
  @@map("community_posts")
}

model PostLike {
  id        String        @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime      @default(now()) @map("created_at")
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation("PostLikes", fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([postId])
  @@map("post_likes")
}

model StudentPerformanceData {
  id                     String   @id @default(cuid())
  studentId              String
  subject                String
  topic                  String?
  skillLevel             Int      @default(1)
  difficultyPreference   Int      @default(5)
  accuracy               Float    @default(0.0)
  speed                  Float?
  consistency            Float    @default(0.0)
  preferredQuestionTypes String[] @default([])
  strengths              String[] @default([])
  weaknesses             String[] @default([])
  lastExamScore          Float?
  trending               String   @default("STABLE")
  updatedAt              DateTime @updatedAt @map("updated_at")
  student                User     @relation("PerformanceData", fields: [studentId], references: [id])

  @@unique([studentId, subject])
  @@index([studentId])
  @@map("student_performance_data")
}

model CurriculumStandard {
  id              String                    @id @default(cuid())
  country         String
  system          String
  subject         String
  gradeLevel      Int
  code            String
  title           String
  description     String
  category        String?
  objectives      String[]                  @default([])
  skills          String[]                  @default([])
  createdAt       DateTime                  @default(now()) @map("created_at")
  updatedAt       DateTime                  @updatedAt @map("updated_at")
  studentProgress StudentStandardProgress[]
  exams           Exam[]                    @relation("ExamStandards")
  questions       Question[]                @relation("QuestionStandards")

  @@unique([country, system, code])
  @@index([country, system])
  @@index([subject, gradeLevel])
  @@map("curriculum_standards")
}

model StudentStandardProgress {
  id          String             @id @default(cuid())
  studentId   String
  standardId  String
  status      StandardStatus     @default(NOT_STARTED)
  mastery     Float              @default(0.0)
  attempts    Int                @default(0)
  startedAt   DateTime?
  masteredAt  DateTime?
  lastAttempt DateTime?
  updatedAt   DateTime           @updatedAt @map("updated_at")
  standard    CurriculumStandard @relation(fields: [standardId], references: [id])
  student     User               @relation("StudentStandardProgress", fields: [studentId], references: [id])

  @@unique([studentId, standardId])
  @@index([studentId])
  @@index([standardId])
  @@map("student_standard_progress")
}

model LessonPlan {
  id            String                 @id @default(cuid())
  title         String
  topic         String
  subject       String
  gradeLevel    Int
  duration      String
  content       Json
  createdBy     String
  isPublished   Boolean                @default(false)
  isShared      Boolean                @default(false)
  tags          String[]               @default([])
  difficulty    String?
  estimatedTime String?
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  assignments   LessonPlanAssignment[]
  creator       User                   @relation("CreatedLessonPlans", fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([subject, gradeLevel])
  @@map("lesson_plans")
}

model LessonPlanAssignment {
  id             String     @id @default(cuid())
  lessonPlanId   String
  studentId      String?
  classId        String?
  assignedBy     String
  dueDate        DateTime?
  completedAt    DateTime?
  isCompleted    Boolean    @default(false)
  progress       Json?
  studentNotes   String?
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  assignedByUser User       @relation("LessonAssignmentCreator", fields: [assignedBy], references: [id])
  class          Class?     @relation(fields: [classId], references: [id])
  lessonPlan     LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
  student        User?      @relation("StudentLessonAssignments", fields: [studentId], references: [id])

  @@index([studentId])
  @@index([classId])
  @@index([assignedBy])
  @@map("lesson_plan_assignments")
}

model StudyModule {
  id           String                  @id @default(cuid())
  title        String
  description  String?
  topic        String
  subject      String
  gradeLevel   Int
  aiGenerated  Boolean                 @default(true)
  difficulty   String                  @default("medium")
  totalLessons Int                     @default(10)
  passingScore Int                     @default(95)
  livesEnabled Boolean                 @default(true)
  maxLives     Int                     @default(3)
  createdBy    String
  xpReward     Int                     @default(100)
  badgeType    String?
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @updatedAt @map("updated_at")
  status       ModulePublishStatus     @default(PUBLISHED)
  lessons      StudyLesson[]
  assignments  StudyModuleAssignment[]
  creator      User                    @relation("CreatedStudyModules", fields: [createdBy], references: [id])
  progress     StudyProgress[]

  @@index([createdBy])
  @@index([subject, gradeLevel])
  @@map("study_modules")
}

model StudyLesson {
  id             String          @id @default(cuid())
  moduleId       String
  lessonNumber   Int
  title          String
  content        Json
  minScore       Int             @default(80)
  maxAttempts    Int             @default(3)
  xpReward       Int             @default(10)
  order          Int
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  completedSteps CompletedStep[]
  module         StudyModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  steps          StudyStep[]

  @@unique([moduleId, lessonNumber])
  @@index([moduleId])
  @@map("study_lessons")
}

model StudyStep {
  id           String                @id @default(cuid())
  lessonId     String
  stepNumber   Int
  type         StepType
  title        String
  content      Json
  passingScore Int                   @default(80)
  timeLimit    Int?
  order        Int
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  attempts     StudentStepProgress[]
  lesson       StudyLesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, stepNumber])
  @@index([lessonId])
  @@map("study_steps")
}

model SubscriptionTier {
  id                                String          @id @default(cuid())
  name                              String
  description                       String?
  priceCents                        Int             @default(0)
  currency                          String          @default("USD")
  interval                          BillingInterval @default(MONTH)
  billingDays                       Int?            @default(30)
  examLimitPerPeriod                Int             @default(0)
  studyModuleLimitPerPeriod         Int             @default(0)
  maxAttemptsPerExam                Int             @default(1)
  creatorExamCreateLimitPerPeriod   Int             @default(0)
  creatorModuleCreateLimitPerPeriod Int             @default(0)
  isActive                          Boolean         @default(true)
  createdAt                         DateTime        @default(now()) @map("created_at")
  updatedAt                         DateTime        @updatedAt @map("updated_at")
  subscriptions                     Subscription[]

  @@map("subscription_tiers")
}

model Subscription {
  id                        String                     @id @default(cuid())
  userId                    String
  tierId                    String
  status                    SubscriptionStatus         @default(ACTIVE)
  startedAt                 DateTime                   @default(now())
  expiresAt                 DateTime
  autoRenew                 Boolean                    @default(true)
  lastResetAt               DateTime                   @default(now())
  examsTakenThisPeriod      Int                        @default(0)
  modulesAccessedThisPeriod Int                        @default(0)
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  payments                  Payment[]
  moduleAccess              SubscriptionModuleAccess[]
  tier                      SubscriptionTier           @relation(fields: [tierId], references: [id])
  user                      User                       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tierId])
  @@map("subscriptions")
}

model Payment {
  id             String          @id @default(cuid())
  userId         String
  subscriptionId String?
  provider       PaymentProvider @default(FLUTTERWAVE)
  amountCents    Int
  currency       String          @default("USD")
  status         PaymentStatus   @default(PENDING)
  txRef          String          @unique
  flwRef         String?
  raw            Json?
  metadata       Json?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  subscription   Subscription?   @relation(fields: [subscriptionId], references: [id])
  user           User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("payments")
}

model SubscriptionModuleAccess {
  id             String       @id @default(cuid())
  subscriptionId String
  moduleId       String
  accessedAt     DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, moduleId])
  @@index([subscriptionId])
  @@map("subscription_module_access")
}

model StudyModuleAssignment {
  id              String       @id @default(cuid())
  moduleId        String
  studentId       String
  assignedBy      String
  dueDate         DateTime?
  instructions    String?
  currentLesson   Int          @default(1)
  currentStep     Int          @default(1)
  overallProgress Float        @default(0)
  totalXp         Int          @default(0)
  lives           Int          @default(3)
  streak          Int          @default(0)
  lastActiveAt    DateTime?
  status          ModuleStatus @default(IN_PROGRESS)
  startedAt       DateTime     @default(now())
  completedAt     DateTime?
  averageScore    Float        @default(0)
  totalAttempts   Int          @default(0)
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  assignedByUser  User         @relation("StudyAssignmentCreator", fields: [assignedBy], references: [id])
  module          StudyModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  student         User         @relation("StudentStudyAssignments", fields: [studentId], references: [id])

  @@unique([moduleId, studentId])
  @@index([studentId])
  @@index([assignedBy])
  @@map("study_module_assignments")
}

model StudyProgress {
  id                  String          @id @default(cuid())
  moduleId            String
  studentId           String
  currentLessonNumber Int             @default(1)
  currentStepNumber   Int             @default(1)
  totalXP             Int             @default(0)
  livesRemaining      Int             @default(3)
  streak              Int             @default(0)
  lastAccessedAt      DateTime        @default(now())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  completedSteps      CompletedStep[]
  module              StudyModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  student             User            @relation("StudentProgress", fields: [studentId], references: [id])

  @@unique([moduleId, studentId])
  @@index([studentId])
  @@map("study_progress")
}

model CompletedStep {
  id          String        @id @default(cuid())
  progressId  String
  lessonId    String
  stepNumber  Int
  completedAt DateTime      @default(now())
  score       Float
  timeSpent   Int
  lesson      StudyLesson   @relation(fields: [lessonId], references: [id])
  progress    StudyProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId, stepNumber])
  @@map("completed_steps")
}

model StudentStepProgress {
  id            String    @id @default(cuid())
  stepId        String
  studentId     String
  attemptNumber Int
  score         Float
  answers       Json
  timeSpent     Int
  passed        Boolean
  completedAt   DateTime  @default(now())
  step          StudyStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  student       User      @relation("StudentStepProgress", fields: [studentId], references: [id])

  @@index([stepId])
  @@index([studentId])
  @@map("student_step_progress")
}

model Tier {
  id                String     @id @default(cuid())
  name              String     @unique
  description       String?
  maxExams          Int        @default(10)
  maxStudyModules   Int        @default(10)
  maxStudents       Int        @default(50)
  validityDays      Int        @default(30)
  price             Float      @default(0)
  currency          String     @default("RWF")
  isActive          Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  totalAttemptsPool Int        @default(100)
  users             UserTier[]
}

model UserTier {
  id                  String    @id @default(cuid())
  userId              String    @unique
  tierId              String
  examsCreated        Int       @default(0)
  studyModulesCreated Int       @default(0)
  studentsCreated     Int       @default(0)
  assignedBy          String?
  assignedAt          DateTime  @default(now())
  expiresAt           DateTime?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  attemptsUsed        Int       @default(0)
  tier                Tier      @relation(fields: [tierId], references: [id])
  user                User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tierId])
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  type        OrgType
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invites     Invite[]
  memberships Membership[]
  owner       User         @relation("UserOrganizations", fields: [ownerId], references: [id])

  @@map("organizations")
}

model Membership {
  id        String           @id @default(uuid())
  userId    String
  orgId     String
  role      Role
  status    MembershipStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  org       Organization     @relation(fields: [orgId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@unique([userId, orgId], name: "memberships_userId_orgId_key")
  @@map("memberships")
}

model Invite {
  id           String       @id @default(cuid())
  orgId        String
  inviterId    String
  role         Role
  email        String
  code         String       @unique
  status       InviteStatus @default(PENDING)
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  acceptedAt   DateTime?
  acceptedBy   String?
  acceptor     User?        @relation("UserAcceptedInvites", fields: [acceptedBy], references: [id], onDelete: Restrict)
  inviter      User         @relation("UserSentInvites", fields: [inviterId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])

  @@index([orgId])
  @@index([email])
  @@map("invites")
}

enum Role {
  ADMIN
  PARENT
  TEACHER
  STUDENT
}

enum OrgType {
  FAMILY
  SOLO_TEACHER
  SCHOOL
}

enum MembershipStatus {
  INVITED
  ACTIVE
}

enum BillingInterval {
  MONTH
  YEAR
  CUSTOM_DAYS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentProvider {
  FLUTTERWAVE
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  LONG_ANSWER
  FILL_BLANKS
  MATCHING
  ORDERING
  MATH_PROBLEM
  CODING
  DIAGRAM
}

enum ExamStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum GradingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEWED
}

enum PortfolioItemType {
  ASSIGNMENT
  PROJECT
  ARTWORK
  WRITING
  VIDEO
  AUDIO
  PHOTO
  PRESENTATION
  RESEARCH
  EXPERIMENT
  FIELD_TRIP
  REFLECTION
  ACHIEVEMENT
  CERTIFICATE
}

enum PostType {
  QUESTION
  DISCUSSION
  RESOURCE
  SUCCESS_STORY
  TIP
  ANNOUNCEMENT
}

enum StandardStatus {
  NOT_STARTED
  IN_PROGRESS
  MASTERED
  NEEDS_REVIEW
}

enum StepType {
  THEORY
  PRACTICE_EASY
  PRACTICE_MEDIUM
  PRACTICE_HARD
  QUIZ
  CHALLENGE
  REVIEW
}

enum ModuleStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
}

enum ModulePublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
